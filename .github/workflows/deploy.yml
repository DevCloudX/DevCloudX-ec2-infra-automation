name: Deploy EC2 Instances with Terraform

on:
  workflow_dispatch:
    inputs:
      aws_access_key:
        description: 'AWS Access Key ID'
        required: true
        type: string
      aws_secret_key:
        description: 'AWS Secret Access Key'
        required: true
        type: string
      key_pair_name:
        description: 'AWS EC2 Key Pair Name'
        required: true
        type: string
      vpc_name:
        description: 'VPC Name'
        required: true
        type: string
      vpc_cidr:
        description: 'VPC CIDR Block (e.g., 10.0.0.0/16)'
        required: true
        type: string
      subnet_name:
        description: 'Subnet Name'
        required: true
        type: string
      subnet_cidr:
        description: 'Subnet CIDR Block (e.g., 10.0.1.0/24)'
        required: true
        type: string
      security_group_name:
        description: 'Security Group Name'
        required: true
        type: string
      ec2_name:
        description: 'Base EC2 Instance Name'
        required: true
        type: string
      vm_count:
        description: 'Number of VMs to Create'
        required: true
        type: number

jobs:

  setup:
    name: 🛠️ Setup Environment
    runs-on: ubuntu-latest
    outputs:
      tf_version: 1.6.6
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

  create-key:
    name: 🔑 Create EC2 Key Pair
    runs-on: ubuntu-latest
    needs: setup
    steps:
      
      - name: Terraform Init (Key Pair)
        run: terraform init
        working-directory: aws-keypair

      - name: Terraform Apply (Key Pair)
        run: |
          terraform apply -auto-approve \
            -var="aws_access_key=${{ github.event.inputs.aws_access_key }}" \
            -var="aws_secret_key=${{ github.event.inputs.aws_secret_key }}" \
            -var="key_name=${{ github.event.inputs.key_pair_name }}"
        working-directory: aws-keypair

      - name: Save private key to PEM file
        run: terraform output -raw private_key_pem > private_key.pem
        working-directory: aws-keypair

      - name: Install Putty Tools
        run: sudo apt-get update && sudo apt-get install -y putty-tools

      - name: Convert PEM to PPK
        run: puttygen aws-keypair/private_key.pem -o private_key.ppk

      - name: Upload PPK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-keypair-${{ github.run_id }}
          path: private_key.ppk

      - name: Save Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: aws-keypair-terraform-state
          path: aws-keypair/terraform.tfstate

  create-infra-deploy-ec2:
    name: 🏗️ Create VPC/Subnet/SG
    runs-on: ubuntu-latest
    needs: create-key
    environment:
      name: apply

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Terraform Init
        run: terraform init
        working-directory: aws-infra

      - name: Terraform Plan Infra
        run: |
          terraform plan \
            -var="aws_access_key=${{ github.event.inputs.aws_access_key }}" \
            -var="aws_secret_key=${{ github.event.inputs.aws_secret_key }}" \
            -var="key_pair_name=${{ github.event.inputs.key_pair_name }}" \
            -var="vpc_name=${{ github.event.inputs.vpc_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var="subnet_name=${{ github.event.inputs.subnet_name }}" \
            -var="subnet_cidr=${{ github.event.inputs.subnet_cidr }}" \
            -var="security_group_name=${{ github.event.inputs.security_group_name }}" \
            -var="ec2_name=${{ github.event.inputs.ec2_name }}" \
            -var="vm_count=${{ github.event.inputs.vm_count }}"
        working-directory: aws-infra

      - name: Terraform Apply Infra
        run: |
          terraform apply -auto-approve \
            -var="aws_access_key=${{ github.event.inputs.aws_access_key }}" \
            -var="aws_secret_key=${{ github.event.inputs.aws_secret_key }}" \
            -var="key_pair_name=${{ github.event.inputs.key_pair_name }}" \
            -var="vpc_name=${{ github.event.inputs.vpc_name }}" \
            -var="vpc_cidr=${{ github.event.inputs.vpc_cidr }}" \
            -var="subnet_name=${{ github.event.inputs.subnet_name }}" \
            -var="subnet_cidr=${{ github.event.inputs.subnet_cidr }}" \
            -var="security_group_name=${{ github.event.inputs.security_group_name }}" \
            -var="ec2_name=${{ github.event.inputs.ec2_name }}" \
            -var="vm_count=${{ github.event.inputs.vm_count }}"
        working-directory: aws-infra

      - name: Show Public IPs
        run: terraform output public_ips
        working-directory: aws-infra
